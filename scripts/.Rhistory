library(ggplot2)
library(dplyr)
library(sp)
library(rgdal)
library(rgeos)
library(maptools)
library(spdep)
load("~/Dropbox/nupis/dados/atlas.rda")       # Carregar dados do atlas
load('~/Dropbox/nupis/dados/atlas_bruto.rda')
atlas10 = atlas_bruto %>% filter( ano==2010 )
atlas00 = atlas_bruto %>% filter( ano==2000 )
atlas91 = atlas_bruto %>% filter( ano==1991 )
atlas10 = atlas10 %>% select(codmun7, ricos10=pren10ricos, pobres10=pren40)
atlas10 = atlas10 %>% mutate(cm10=(100-(ricos10+pobres10)), palma10=round(ricos10/pobres10,2))
atlas00 = atlas00 %>% select(codmun7, ricos00=pren10ricos, pobres00=pren40)
atlas00 = atlas00 %>% mutate(cm00=(000-(ricos00+pobres00)), palma00=round(ricos00/pobres00,2))
atlas91 = atlas91 %>% select(codmun7, ricos91=pren10ricos, pobres91=pren40)
atlas91 = atlas91 %>% mutate(cm91=(910-(ricos91+pobres91)), palma91=round(ricos91/pobres91,2))
atlas_palma = inner_join(atlas10, atlas00, by='codmun7')
atlas_palma = inner_join(atlas_palma, atlas91, by='codmun7')
aa = atlas %>% select(codmun7, nome.mun, uf:nome.micro, rdpc, pibpc)
atlas_palma$codmun7 = as.factor(atlas_palma$codmun7)
atlas_palma = inner_join(atlas_palma, aa, by='codmun7')
mgm = readOGR(dsn="/home/walef/Dropbox/shapefilesmg/", layer="31mu2500gsr") # lê o arquivo shapefile e cria um vetor (polígono) espacial.
nb = poly2nb(mgm)                             # cria uma lista de vizinhos apartir da lista do polígono
viz2 = poly2nb(mgm)                           # polígono para vizinhos
viz2p = nb2listw(viz2)                        # style = B-binary, W-padronizado na linha
mg = subset(atlas_palma, nome.uf=='minas gerais') # Seleciona as cidades do estado de Minas Gerais
mg = droplevels(mg)
sort(mg$palma91)
sort(mg$palma00)
sort(mg$palma10)
mg = mg %>% filter(palma91 < 20, palma00 < 20, palma10 < 20)
summary(mg$palma91)
xb_91 <- mean(mg$palma91)
sd_91 <- sd(mg$palma91)
cv_91 <- sd_91/xb_91*100
summary(mg$palma00)
xb_00 <- mean(mg$palma00)
sd_00 <- sd(mg$palma00)
cv_00 <- sd_00/xb_00*100
summary(mg$palma10)
xb_10 <- mean(mg$palma10)
sd_10 <- sd(mg$palma10)
cv_10 <- sd_10/xb_10*100
mgp = subset(atlas_palma, nome.uf=='minas gerais')
cidade_palma_maior91 <- mgp %>% filter(palma91 ==15.02)
cidade_palma_maior91$nome.mun
cidade_palma_menor91 <- mg %>% filter(palma91 == 1.220)
cidade_palma_menor91$nome.mun
cidade_palma_maior00 <- mg %>% filter(palma00 == 18.14)
cidade_palma_maior00$nome.mun
cidade_palma_menor00 <- mg %>% filter(palma00 == 1.280)
cidade_palma_menor00$nome.mun
cidade_palma_maior10 <- mgp %>% filter(palma10 > 20)
cidade_palma_maior10$nome.mun
cidade_palma_menor10 <- mg %>% filter(palma10 == 1.250)
cidade_palma_menor10$nome.mun
mgm@data=dplyr::rename(mgm@data, codmun7=GEOCODIG_M)
mg$codmun7 = as.factor(mg$codmun7)
mgm$codmun7 = as.factor(mgm$codmun7)
mga = left_join(mgm@data, mg, by="codmun7")
mgf = fortify(mgm, region="codmun7")
mga$id = mga$codmun7
mgf = left_join(mgf,mga)
options(scipen=999)
mapa_palma91 = ggplot(mgf, aes(long, lat, group=group, fill = palma91)) +
geom_polygon() +
coord_equal() + theme_void() + scale_fill_distiller(palette = "Spectral")
mapa_palma91
mgf = fortify(mgm, region="codmun7")
mgm@data=dplyr::rename(mgm@data, codmun7=GEOCODIG_M)
mg$codmun7 = as.factor(mg$codmun7)
mgm = readOGR(dsn="/home/walef/Dropbox/shapefilesmg/", layer="31mu2500gsr") # lê o arquivo shapefile e cria um vetor (polígono) espacial.
mgm@data=dplyr::rename(mgm@data, codmun7=GEOCODIG_M)
mg$codmun7 = as.factor(mg$codmun7)
mgm$codmun7 = as.factor(mgm$codmun7)
mga = left_join(mgm@data, mg, by="codmun7")
mgf = fortify(mgm, region="codmun7")
mga$id = mga$codmun7
mgf = left_join(mgf,mga)
options(scipen=999)
names(mg)
mapa = ggplot(mgf, aes(long, lat, group=group, fill = RAZDEP)) +
geom_polygon() +
coord_equal() + theme_void() + scale_fill_distiller(palette = "Spectral")
mapa
rm(list = ls())
load('/home/walef/Dropbox/4º Periodo/Fundamentos de Programação/Dados/mg-2010.rda')
mg = mg %>% mutate(Palma = round(PREN10RICOS/PREN40,2)) #
mgm = readOGR(dsn="/home/walef/Dropbox/shapefilesmg/", layer="31mu2500gsr") # lê o arquivo shapefile e cria um vetor (polígono) espacial.
mgm@data=dplyr::rename(mgm@data, Codmun7=GEOCODIG_M)
mg$Codmun7 = as.factor(mg$Codmun7)
mgm$Codmun7 = as.factor(mgm$Codmun7)
mgf = left_join(mgm@data, mg, by="Codmun7")
mgf = fortify(mgm, region="Codmun7")
mga$id = mga$Codmun7
mgf = left_join(mgf,mga)
mga$id = mgf$Codmun7
mga = left_join(mgm@data, mg, by="Codmun7")
mgf = fortify(mgm, region="Codmun7")
mga$id = mga$Codmun7
mgf = left_join(mgf,mga)
options(scipen=999)
mapa = ggplot(mgf, aes(long, lat, group=group, fill = RAZDEP)) +
geom_polygon() +
coord_equal() + theme_void() + scale_fill_distiller(palette = "Spectral")
mapa
if(x=='demografia'){
dadosde <- dados %>% select(MESO, POP, ESPVIDA, ESPVIDA_C, FECTOT, FECTOT_C, MORT1,
T_ENV, RAZDEP, T_M10A14CF, T_M15A17CF, T_MULCHEFEFIF014)
show(summary(dadosde))
pushViewport(viewport(layout = grid.layout(1,2)))
w <- ggplot(dadosde, aes(T_MULCHEFEFIF014, MORT1)) + geom_point() + geom_smooth(method = lm) +
theme_bw() + xlab('% de mulheres de 15 a 17 que tiveram filhos') + ylab('Mortalidade infantil')
e <- ggplot(mgf, aes(long, lat, group=group, fill = MORT1)) +
geom_polygon() +
coord_equal() + theme_void() + scale_fill_distiller(palette = "Spectral")
print(w, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print(e, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
}
x <- tema
regiao <- readline('Mesorregião que você quer comparar as cidades ')
regiao <- readline('Mesorregião que você quer comparar as cidades ')
tema <- readline('Qual o tema? ')
if(regiao == 'CM'){
dados <- filter(mg, MESO.1 == 'CM')
}
if(regiao == 'TM'){
dados <- filter(mg, MESO.1 == 'TM')
}
if(regiao == 'OE'){
dados <- filter(mg, MESO.1 == 'OE')
}
if(regiao == 'ZM'){
dados <- filter(mg, MESO.1 == 'ZM')
}
if(regiao == 'MBH'){
dados <- filter(mg, MESO.1 == 'MBH')
}
if(regiao == 'SSO'){
dados <- filter(mg, MESO.1 == 'SSO')
}
if(regiao == 'CV'){
dados <- filter(mg, MESO.1 == 'CV')
}
if(regiao == 'VRD'){
dados <- filter(mg, MESO.1 == 'VRD')
}
if(regiao == 'VM'){
dados <- filter(mg, MESO.1 == 'VM')
}
if(regiao == 'VJ'){
dados <- filter(mg, MESO.1 == 'VJ')
}
if(regiao == 'N'){
dados <- filter(mg, MESO.1 == 'N')
}
if(regiao == 'NOE'){
dados <- filter(mg, MESO.1 == 'NOE')
}
x <- tema
if(x=='demografia'){
dadosde <- dados %>% select(MESO, POP, ESPVIDA, ESPVIDA_C, FECTOT, FECTOT_C, MORT1,
T_ENV, RAZDEP, T_M10A14CF, T_M15A17CF, T_MULCHEFEFIF014)
show(summary(dadosde))
pushViewport(viewport(layout = grid.layout(1,2)))
w <- ggplot(dadosde, aes(T_MULCHEFEFIF014, MORT1)) + geom_point() + geom_smooth(method = lm) +
theme_bw() + xlab('% de mulheres de 15 a 17 que tiveram filhos') + ylab('Mortalidade infantil')
e <- ggplot(mgf, aes(long, lat, group=group, fill = MORT1)) +
geom_polygon() +
coord_equal() + theme_void() + scale_fill_distiller(palette = "Spectral")
print(w, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print(e, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
}
w <- ggplot(dadosde, aes(T_MULCHEFEFIF014, MORT1)) + geom_point() + geom_smooth(method = lm) +
theme_bw() + xlab('% de mulheres de 15 a 17 que tiveram filhos') + ylab('Mortalidade infantil')
w
e <- ggplot(mgf, aes(long, lat, group=group, fill = MORT1)) +
geom_polygon() +
coord_equal() + theme_void() + scale_fill_distiller(palette = "Spectral")
e
print(w, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print(e, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
pushViewport(viewport(layout = grid.layout(1,2)))
par(mfrow=c(1,2))
pushViewport(viewport(layout = grid.layout(1,2)))
w <- ggplot(dadosde, aes(T_MULCHEFEFIF014, MORT1)) + geom_point() + geom_smooth(method = lm) +
theme_bw() + xlab('% de mulheres de 15 a 17 que tiveram filhos') + ylab('Mortalidade infantil')
e <- ggplot(mgf, aes(long, lat, group=group, fill = MORT1)) +
geom_polygon() +
coord_equal() + theme_void() + scale_fill_distiller(palette = "Spectral")
print(w, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print(e, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
par(mfrow=c(1,2))
pushViewport(viewport(layout = grid.layout(1,2)))
w <- ggplot(dadosde, aes(T_MULCHEFEFIF014, MORT1)) + geom_point() + geom_smooth(method = lm) +
theme_bw() + xlab('% de mulheres de 15 a 17 que tiveram filhos') + ylab('Mortalidade infantil')
e <- ggplot(mgf, aes(long, lat, group=group, fill = MORT1)) +
geom_polygon() +
coord_equal() + theme_void() + scale_fill_distiller(palette = "Spectral")
print(w, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print(e, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
par(mfrow=c(1,2))
pushViewport(viewport(layout = grid.layout(1,2)))
w <- ggplot(dadosde, aes(T_MULCHEFEFIF014, MORT1)) + geom_point() + geom_smooth(method = lm) +
theme_bw() + xlab('% de mulheres de 15 a 17 que tiveram filhos') + ylab('Mortalidade infantil')
e <- ggplot(mgf, aes(long, lat, group=group, fill = MORT1)) +
geom_polygon() +
coord_equal() + theme_void() + scale_fill_distiller(palette = "Spectral")
print(w, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print(e, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
library(ggplot2)
library(dplyr)
library(rgdal)
library(rgeos)
library(maptools)
library(grid)
analise <- function(){   # A função 'analise' é responsável pela análise do conjunto de dados escolhido pelo usuário.
# Preparando os dados -----------------------------------------------------
load('/home/walef/Dropbox/4º Periodo/Fundamentos de Programação/Dados/mg-2010.rda') # Carrega o conjunto de dados 'mg'
# Interação com usuario ---------------------------------------------------
print(select(mg, MESO.1, MESO) %>% distinct()) # Mostrar a lista de regiões
regiao <- readline('Mesorregião que você quer comparar as cidades: ')
tema <- readline("Escolha algum tema (demografia, educação, trabalho, renda, habitação): ")
if(tema=='demografia'){             # Essa estrutura mostra as variáveis de acordo com o tema escolhido
print(colnames(mg[1:1,6:19]))   # para que o usuário possa escolher quais analisar.
}
if(tema=='educação'){
print(colnames(mg[1:1,17:23]))
}
if(tema=='trabalho'){
print(colnames(mg[1:1,24:45]))
}
if(tema=='renda'){
print(colnames(mg[1:1,46:56]))
}
if(tema=='habitação'){
print(colnames(mg[1:1,57:62]))
}
v1 <- as.character(readline("Escolha a sua primeira variável: "))
v2 <- as.character(readline('Escolha a sua segunda variável: '))
# Função Palma ------------------------------------------------------------
Palma <- function(){       # Essa funcão cria a variável índice de Palma, que consiste na razão
c <- 1                   #  entre o percentual da renda apropriado pelos 10% mais ricos dividido
Palma <- c()             # pelo percentual apropriado pelos 40% mais pobres.
repeat{
Palma[c] <- mg[c,51]/mg[c,54]
c <- c + 1
if(c > nrow(mg)){
break
}
}
mg <- mg %>% mutate(Palma=round(Palma,2))  # A funão 'mutate' acrescenta o vetor com a
mg                                         # variável índice de Palma ao conjunto de dados 'mg'
}
mg <- Palma()
# Selecionar Meso ---------------------------------------------------------
seleciona_meso <- function(regiao){       # A função 'seleciona_meso' sub seleciona os dados 'mg'
if(regiao == 'CM'){                     # com a mesorregioão escolhida pelo usuário.
dados <- filter(mg, MESO.1 == 'CM')
}
if(regiao == 'TM'){
dados <- filter(mg, MESO.1 == 'TM')
}
if(regiao == 'OE'){
dados <- filter(mg, MESO.1 == 'OE')
}
if(regiao == 'ZM'){
dados <- filter(mg, MESO.1 == 'ZM')
}
if(regiao == 'MBH'){
dados <- filter(mg, MESO.1 == 'MBH')
}
if(regiao == 'SSO'){
dados <- filter(mg, MESO.1 == 'SSO')
}
if(regiao == 'CV'){
dados <- filter(mg, MESO.1 == 'CV')
}
if(regiao == 'VRD'){
dados <- filter(mg, MESO.1 == 'VRD')
}
if(regiao == 'VM'){
dados <- filter(mg, MESO.1 == 'VM')
}
if(regiao == 'VJ'){
dados <- filter(mg, MESO.1 == 'VJ')
}
if(regiao == 'N'){
dados <- filter(mg, MESO.1 == 'N')
}
if(regiao == 'NOE'){
dados <- filter(mg, MESO.1 == 'NOE')
}
return(dados)
}
dados <- seleciona_meso(regiao)      # O objeto 'dados' recebe a saída da função 'seleciona_meso'
# Selecionar Tema ----------------------------------------------------------
seleciona_tema <- function(tema){   # A função 'seleciona_tema' sub seleciona o conjunto 'dados' criado anteriormente
if(tema == 'demografia'){         # de acordo com o tema escolhido pelo usuário.
dados <- select(dados, Codmun7, MUN, POP:T_MULCHEFEFIF014, PORTE)
}
if(tema == 'educação'){
dados <- select(dados, Codmun7, MUN, E_ANOSESTUDO:T_FLSUPER, PORTE)
}
if(tema == 'trabalho'){
dados <- select(dados, Codmun7, MUN, P_AGRO:REN5, PORTE)
}
if(tema == 'renda'){
dados <- select(dados, Codmun7, MUN, RDPC:R2040, PORTE)
}
if(tema == 'habitação'){
dados <- select(dados, Codmun7, MUN, T_AGUA:PAREDE, PORTE)
}
return(dados)
}
dadoste <- seleciona_tema(tema)   # É criado um novo conjunto de dados chamado 'dadoste' com a saída da função anterior.
# graficos ----------------------------------------------------------------
#A função 'entregavariavel' serve para pegar as variáveis que o usuário escolheu e
#entregá-las a um novo dataframe. O intuito dela é criar um novo conjunto de dados
#para que seja possível criar gráficos 'dinâmicos'.
entregavariavel <- function(){  # A função 'entregavariavel tem como objetivo criar um conjunto de dados
var1 <- c(0)                  # usando apenas as variáveis escolhidas pelo usuário.
var2 <- c(0)
for(i in 1:nrow(dadoste)){
var1[i] <- dadoste[i,as.character(v1)]
var2[i] <- dadoste[i,as.character(v2)]
}
dadosn <- data.frame(var1,var2)
graficos <- function(){            # A função 'graficos' faz uma diagrama de disperção entre as variáveis esolhidas pelo usuário.
w <- ggplot(dadosn, aes(var1, var2)) + geom_point() + geom_smooth(method = lm) +
xlab(as.character(v1)) + ylab(as.character(v2))
w
}
cat("A correlação entre estar duas variáveis é de: ", cor(var1, var2)) # Também é feita a correlação entre as varáveis escolhidas.
return(graficos())
}
entregavariavel()
}
analise()
load('/home/walef/Dropbox/4º Periodo/Fundamentos de Programação/Dados/mg-2010.rda')
library(ggplot2)
library(dplyr)
library(grid)
par(mfrow=c(2,2))     # Essa função faz com que os graficos apresentados apareçam em uma só tela e na disposição de 2 por 2.
pushViewport(viewport(layout = grid.layout(2, 2)))
a <- ggplot(mg, aes(ESPVIDA)) + geom_histogram(aes(y=..density..), colour="black", fill="#d9b6b6") +
geom_vline(data=mg, aes(xintercept=mean(mg$ESPVIDA)), size=1, color='red') +
geom_density(alpha=.2) + ylab('Percentual das cidades') + xlab('Espectativa de vida')
b <- ggplot(mg, aes(RAZDEP)) + geom_histogram(aes(y=..density..), colour="black", fill="#d9b6b6") +
geom_density(alpha=.2) + geom_vline(data=mg, aes(xintercept=mean(mg$RAZDEP)), size=1, color='red') +
ylab('Percentual das cidades') + xlab('Razão de dependência')
c <- ggplot(mg, aes(PORTE)) + geom_bar(colour="black", fill="#d9b6b6") + ylab('Quantidade') + xlab('Porte')
d <- ggplot(mg, aes(MESO.1)) + geom_bar( colour="black", fill="#d9b6b6") + ylab('Quantidade') + xlab('Mesorregião') + theme_bw()
print(a, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print(b, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
print(c, vp = viewport(layout.pos.row = 2, layout.pos.col = 1))
print(d, vp = viewport(layout.pos.row = 2, layout.pos.col = 2))
print(a, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print(b, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
print(c, vp = viewport(layout.pos.row = 2, layout.pos.col = 1))
print(d, vp = viewport(layout.pos.row = 2, layout.pos.col = 2))
a
par(mfrow=c(2,2))     # Essa função faz com que os graficos apresentados apareçam em uma só tela e na disposição de 2 por 2.
pushViewport(viewport(layout = grid.layout(2, 2)))
a <- ggplot(mg, aes(ESPVIDA)) + geom_histogram(aes(y=..density..), colour="black", fill="#d9b6b6") +
geom_vline(data=mg, aes(xintercept=mean(mg$ESPVIDA)), size=1, color='red') +
geom_density(alpha=.2) + ylab('Percentual das cidades') + xlab('Espectativa de vida')
b <- ggplot(mg, aes(RAZDEP)) + geom_histogram(aes(y=..density..), colour="black", fill="#d9b6b6") +
geom_density(alpha=.2) + geom_vline(data=mg, aes(xintercept=mean(mg$RAZDEP)), size=1, color='red') +
ylab('Percentual das cidades') + xlab('Razão de dependência')
c <- ggplot(mg, aes(PORTE)) + geom_bar(colour="black", fill="#d9b6b6") + ylab('Quantidade') + xlab('Porte')
d <- ggplot(mg, aes(MESO.1)) + geom_bar( colour="black", fill="#d9b6b6") + ylab('Quantidade') + xlab('Mesorregião') + theme_bw()
print(a, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print(b, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
print(c, vp = viewport(layout.pos.row = 2, layout.pos.col = 1))
print(d, vp = viewport(layout.pos.row = 2, layout.pos.col = 2))
a <- ggplot(mg, aes(ESPVIDA)) + geom_histogram(aes(y=..density..), colour="pink", fill="#d9b6b6") +
geom_vline(data=mg, aes(xintercept=mean(mg$ESPVIDA)), size=1, color='red') +
geom_density(alpha=.2) + ylab('Percentual das cidades') + xlab('Espectativa de vida')
b <- ggplot(mg, aes(RAZDEP)) + geom_histogram(aes(y=..density..), colour="black", fill="#d9b6b6") +
geom_density(alpha=.2) + geom_vline(data=mg, aes(xintercept=mean(mg$RAZDEP)), size=1, color='red') +
ylab('Percentual das cidades') + xlab('Razão de dependência')
c <- ggplot(mg, aes(PORTE)) + geom_bar(colour="black", fill="#d9b6b6") + ylab('Quantidade') + xlab('Porte')
d <- ggplot(mg, aes(MESO.1)) + geom_bar( colour="black", fill="#d9b6b6") + ylab('Quantidade') + xlab('Mesorregião') + theme_bw()
print(a, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print(b, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
print(c, vp = viewport(layout.pos.row = 2, layout.pos.col = 1))
print(d, vp = viewport(layout.pos.row = 2, layout.pos.col = 2))
# pacotes necessários
library(ggplot2)
library(dplyr)
library(sp)
library(rgdal)
library(rgeos)
library(maptools)
library(spdep)
load("~/Dropbox/nupis/dados/atlas.rda")       # Carregar dados do atlas
~/Dropbox/nupis/dados/atlas.rda
load("~/Dropbox/nupis/dados/atlas.rda")       # Carregar dados do atlas
load("/home/walef/Unifal/4º Semestre/Análise quantitativa de políticas públicas/atlas.rda")       # Carregar dados do atlas
load('/home/walef/Unifal/4º Semestre/Análise quantitativa de políticas públicas/atlas.rda')
atlas10 = atlas_bruto %>% filter( ano==2010 )
mgm<-readOGR(dsn="/home/walef/AEDE/Malhas/minas_gerais_municipios/", layer="31MUE250GC_SIR.shp")
mgm<-readOGR(dsn="/home/walef/AEDE/Malhas/minas_gerais_municipios/", layer="31MUE250GC_SIR.shp")
mgm = readOGR(dsn="/home/walef/Dropbox/shapefilesmg/", layer="31mu2500gsr") # lê o arquivo shapefile e cria um vetor (polígono) espacial.
mgm<-readOGR(dsn="/home/walef/AEDE/Malhas/minas_gerais_municipios/", layer="31MUE250GC_SIR")
mgm<-readOGR(dsn="/home/walef/AEDE/Malhas/minas_gerais_municipios/", layer="31MUE250GC_SIR")
nb <- poly2nb(mgm)
nb
load("~/Dropbox/nupis/dados/atlas.rda")       # Carregar dados do atlas
load('/home/walef/AEDE/Dados/atlasb.csv')
mgm<-readOGR(dsn="/home/walef/AEDE/Malhas/minas_gerais_municipios/", layer="31MUE250GC_SIR")
nb <- poly2nb(mgm)
nb
summary(nb)
mgm2<-subset(mgm, MICRORREGI==31050)
names(mgm)
viz2 <- poly2nb(mgm)
load("/home/walef/Desktop/testelogico.csv")
dados <- read.csv("/home/walef/Desktop/testelogico.csv")
dados <- read.csv("/home/walef/Desktop/testelogico.csv", sep =",")
dados <- read.csv("/home/walef/Desktop/testelogico.csv", sep =",", header = T)
dados <- read.csv("/home/walef/Desktop/testelogico2.csv", sep =",", header = T)
dados <- read.csv("/home/walef/Desktop/testelogico1.csv", sep =",", header = T)
dados <- read.csv("/home/walef/Desktop/testelogico2.csv", sep =",", header = T)
dados
dados <- read.csv("/home/walef/Desktop/testelogico2.csv", sep =",", header = T, encoding = 'UTF-8')
dados
dados <- read.csv("/home/walef/Desktop/testelogico2.csv", sep =",", header = T, encoding = 'UTF-16')
dados
dados <- read.csv("/home/walef/Desktop/testelogico2.csv", sep =",", header = T, encoding = 'Western Europe')
dados
dados <- read.csv("/home/walef/Desktop/testelogico2.csv", sep =",", header = T, encoding = 'Windows-1252/WinLatin 1')
dados
dados <- read.csv("/home/walef/Desktop/testelogico1.csv", sep =",", header = T, encoding = 'Windows-1252/WinLatin 1')
dados <- read.csv("/home/walef/Desktop/testelogico1.csv", sep =",", header = T)
mgm<-readOGR(dsn="/home/walef/Documents/shapefilesmg/", layer="31mu2500gsr")
mgm<-readOGR(dsn="/home/walef/AEDE/Malhas/minas_gerais_municipios/", layer="31MUE250GC_SIR")
names(mgm)
summary(mgm)
par(mar=c(0,0,0,0))
plot(mgm)
table(mgm$MICRORREGI)
mgm1<-subset(mgm, MESORREGI?.==3110)
mgm1<-subset(mgm, MESORREGI==3110)
mgm1<-subset(mgm, MESORREGI==3110)
table(mgm$MICRORREGI)
names(mgm)
par(mar=c(0,0,0,0))
table(mgm$MICRORREGI)
mgm1$NOME_MUNIC
plot(mgm1)
ggplot(mgm1, aes(x = long, y = lat, group=group)) + geom_path()
library(shiny); runApp('~/interface-atuarial/teste_interface_seca.R')
runApp('~/interface-atuarial/teste_interface_seca.R')
x = runif(100)
x
plot(x)
setwd("~/Dropbox/Estatística Computacional/Scripts")
# Aula 5 - Estatística Computacional
rm(list = ls())
x = runif(100)
x
plot(x)
plot(x)
x = runif(100)
x
plot(x)
x = runif(100)
x
plot(x)
# vaŕios gráficos
par(mfrow = c(2,4))
x = runif(100)
plot(x)
plot(x)
plot(x)
plot(x)
plot(x)
plot(x)
plot(x)
plot(x)
plot(x)
plot(x)
plot(x)
plot(x)
plot(x)
plot(x)
plot(x)
plot(x)
# vaŕios gráficos
par(mfrow = c(2,4))
x = runif(100)
# vaŕios gráficos
par(mfrow = c(2,4))
x = runif(100)
plot(x)
hist(x)
plot(x)
hist(x)
plot(x)
hist(x)
plot(x)
hist(x)
x = runif(1000000)
plot(x)
hist(x)
plot(x)
hist(x)
x = runif(1000000)
